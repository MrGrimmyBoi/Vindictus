(defmacro push_back(the-list el)
`(setf ,the-list (concatenate 'list ,the-list (list ,el))))

(defmacro gremove(el the-list)
`(setf ,the-list (remove ,el ,the-list)))

(defun cassoc (el alist)
      (if alist
        (if (string= el (caar alist))
          (car alist)
          (cassoc el (cdr alist)))
          NIL))


(defun list-to-string (lst)
  (when lst
    (concatenate 'string (write-to-string (car lst)) " " (list-to-string (cdr lst)))))

(defun string-to-list(str) (read-from-string (concatenate 'string "(" str ")")))

(defun hash-it(pass index)
          (cond
            ((equal (car pass) nil) nil)
            ((oddp (car pass)) (cons (+ (ash (car pass) -1) (* 2 index)) (hash-it (cdr pass) index)))
            (t (cons (- (+ (- (car pass) (ash index 1)) (ash (ash (ash (car pass) -1) -1) -1)) (* 2 index)) (hash-it (cdr pass) index)))))

(defun sum-list (lst)
      (if(not (equal lst nil))
       (+ (car lst) (sum-list (cdr lst)))
       '0))

(defun find-index (lst)
   (if (> lst 10)
    (+ (mod lst 10) (find-index (truncate (/ lst 10))))
    (mod lst 10)))

(defun is-admin(name)
  (if (member name *admin-list*)
   (setf *admin-logged* t)))

(defun userp(name)
(if (member name *users*) t nil))

(defun ask-password(name)
    (princ "Introduce your password: ")
    (let ((ind-name (find-index (sum-list (map 'list #'char-code (string name))))))
         (flet ((hash-pass(psw) (coerce (mapcar #'code-char(hash-it (map 'list #'char-code psw) ind-name)) 'string)))
          (let ((pass (read-line)))
           (if (string= (gethash 'password (eval name)) (hash-pass pass))
            (progn (setf *logged* t) (setf *logged-account* name) (is-admin name) `(welcome back ,*logged-account* at "Vindictus!"))
            '(password incorrect!))))))

  (defun a-add-component()
    (labels ((verify-name(category)
              (let ((name (read)))
                  (if (member name (gethash 'the-list (eval category)))
                      (progn (princ "Sorry, there is already a component with this name") (princ #\newline)
                      (verify-name category))
                      (return-from verify-name name))))
                    (add-chars (name category clist)
                     (when clist
                       (database-print (car clist))
                       (let ((char (read)))
                          (push_back (gethash name (eval category)) char)
                          (add-chars name category (cdr clist))))))
    (princ "What kind of component do you want to add? ")
    (princ "If the name is not valid then you'll have to type it again.") (princ #\newline)
    (princ "(*RAM*, *video-cards*, *CPU*, *storage*, *mother-boards*, *PSU*)") (princ #\newline)
    (let ((option (read)))
      (loop while (not (member option *components*)) do(setf option (read)))
        (princ "Name of the component:")
          (let ((name (verify-name option))
                (clist (gethash 'chars (eval option))))
              (add-chars name option clist)
              (push_back (gethash 'the-list (eval option)) name)
              (princ "Product added successfully!")))))

    (defun a-delete-component()
        (princ "What kind of component would you like to delete? Ex: ") (database-print *components*)
        (princ "If the name is not valid then you'll have to type it again.") (princ #\newline)
          (setf comp (read))
        (loop while (not (member comp *components*)) do(setf comp (read)))
        (princ #\newline)
        (princ "Which one would you like to delete? If it's not correct you'll have to type again") (princ #\newline)
          (setf piece (read))
          (loop while (not (member comp (gethash 'the-list (eval comp)))) do(setf comp (read)))
          (gremove piece (gethash 'the-list (eval comp)))
          (update-database)
          (princ "Component successfully deleted") (princ #\newline))

    (defun a-view-history (acc-name)
      (if (not (userp acc-name)) (return-from a-view-history "The name is not associated with an account"))
      (princ "Here are your orders:")
      (gethash 'orders (eval acc-name)))

    (defun a-delete-order (acc-name)
      (if (not (userp acc-name)) (return-from a-delete-order "The name is not associated with an account"))
        (labels ((verify-order()
                (let((order (read-line)))
                (setf aux (cassoc order (gethash 'orders (eval acc-name))))
                    (if aux
                      (progn (gremove aux (gethash 'orders (eval acc-name)))
                      '(The order was removed!))
                      (progn (database-print `(there is no ,order order! Do you want to try again?))
                       (if (eq (read) 'yes) (verify-order)))))))
          (verify-order)))

    (defun a-delete-account (acc-name)
      (if (not (userp acc-name)) (return-from a-delete-account "The name is not associated with an account"))
        (princ "Are you sure that you want to delete this account? 'Yes/no'") (princ #\newline)
        (let ((option (read)))
        (if (eq option 'yes)
        (progn (princ "This account will be deleted") (princ #\newline)
        (gremove acc-name *users*)
        (when (eq acc-name *logged-account*)
        (setf *logged* nil)
        (setf *logged-account* nil)
        (setf *admin-logged* nil)
        (update-database)
        (start-screen))))))

    (defun a-make-admin(acc-name)
      (if (not (userp acc-name)) (return-from a-make-admin "The name is not associated with an account"))
        (if (member acc-name *admin-list*) (database-print `(,acc-name is already an admin))
        (push_back *admin-list* acc-name)))

    (defun a-delete-admin(acc-name)
      (if (not (userp acc-name)) (return-from a-delete-admin "The name is not associated with an account"))
        (if (member acc-name *admin-list*) (gremove acc-name *admin-list*)
        (progn (princ "This account isn't an admin") (princ #\newline))))

    (defun print-components(comp)
      (labels ((pres-comps (component clist)
      (when clist
        (database-print (gethash (car clist) (eval component)))
        (pres-comps component (cdr clist)))))
      (princ #\newline)
      (database-print (list-to-string (gethash 'the-list (eval comp))))
      (database-print (list-to-string (gethash 'chars (eval comp))))
      (pres-comps comp (gethash 'the-list (eval comp)))))

(defun start-screen()
    (princ #\newline)
    (princ "Are you here for a small server system for your home or school?") (princ #\newline)
    (princ "Or are you here for a PC monster that will devour every game maxed out?") (princ #\newline)
    (princ "Whichever it is, we got you cover! Welcome to Vindictus! The best place to get a rig that suits your needs!") (princ #\newline)
    (princ "You can start by using the 'create-new-account' command, or if you're already familiar with this place you can simply 'login'!") (princ #\newline)
    (princ "Vindictus Comp. is not responsible for any data-loss or bugs that could make up for a bad user experience. By using our service you accept not to sue us whetever happens!") (princ #\newline)
    (princ "If you don't know what to do you can call 'help', a function that we did not implement yet. But it will be there, maybe, just maybe...") (princ #\newline)
    (princ "Yeah, the 'help' function is there. Feel free to use it!") (princ #\newline)
    (database-repl))
