(defun login()
   (princ "Introduce your name: ")
   (let ((login-name (read)))
    (if(userp login-name) (ask-password login-name) '(the name introduce is not associated with an account. try again!))))

(defun create-account()
       (princ "If the name you picked is already used you'll have to try again until you are asked to select a password") (princ #\newline)
       (princ "Type the name you want to use: ")
       (labels ((verify-name()
                 (let ((name (read)))
                     (if(userp name) (verify-name) name))))
               (let ((name (verify-name)))
                (setf (symbol-value name) (make-hash-table))
                (princ "Select a new password: ") (setf temp-pass (read-line))
                (setf ind-name (find-index (sum-list (map 'list #'char-code (string name)))))
                (let((perm-pass (coerce (mapcar #'code-char(hash-it (map 'list #'char-code temp-pass) ind-name)) 'string)))
                 (setf (gethash 'password (eval name)) perm-pass)
                 (setf *logged* t)
                 (setf *logged-account* name)
                 (push name *users*)
                 (push nil (gethash 'orders (eval name)))
                  `(welcome ,*logged-account* at "Vindictus!")))))

    (defun build-pc()
    (labels ((add-to-pc (lst-pc price comp piece)
      (when piece
        (let ((pieces-list (concatenate 'list (gethash 'the-list (eval comp)) (list nil))))
        (when (not (eq piece 'blnk))
          (if (not (eq (elt (gethash piece (eval comp)) 1) 0))
            (progn
              (push_back lst-pc piece)
              (decf (elt (gethash piece (eval comp)) 1))
              (setf price (+ price (elt (gethash piece (eval comp)) 0))))
            '(this component is no longer in stock! please select another!)))
        (let ((aux (read)))
        (loop while (not (member aux pieces-list)) do (setf aux (read)))
        (setf piece aux))
        (multiple-value-bind (a b) (add-to-pc lst-pc price comp piece)
        (setf lst-pc a) (setf price b))))
        (values lst-pc price)))
    (princ "Pick a name for your pc: ")
    (let ((name (read-line))
      (pc-list '())
      (price 0))
      (push_back pc-list name)
      (princ "Type the name of the piece you want and hit enter.")
      (princ "If the component you typed is not available just type the name of another one that is.")
      (princ "After you picked enough components of a type use 'NIL' to go to the next component.")
    (loop for comp in *components* do(progn
      (print-components comp)
      (multiple-value-bind (a b) (add-to-pc '() 0 comp 'blnk)
      (push_back pc-list a) (setf price (+ price b)))))
      (princ "You purchased the pc: ") (database-print pc-list)
      (push_back (gethash 'orders (eval *logged-account*)) pc-list)
      (princ "With the price of: ") (database-print price))))

(defun delete-account() (a-delete-account *logged-account*))

(defun delete-order() (a-delete-order *logged-account*))

(defun view-history() (a-view-history *logged-account*))

(defun log-off ()
    (princ "Are you sure you want to exit? 'Yes/no'") (princ #\newline)
    (let ((answer (read)))
        (when (eq answer 'yes)
          (setf *logged-account* nil)
          (setf *logged* nil)
          (setf *admin-logged* nil)
          (update-database)
          '(we hope that we will see you soon!))))

(defun help()
(princ "All commands that have 'a-' as prefix are admin commands and are not accessible to the normal users") (princ #\newline)
(princ "All commands that require parameters will have them listed between: '' ") (princ #\newline)
(princ "login: used to access your account") (princ #\newline)
(princ "create-account: used to create a new account") (princ #\newline)
(princ "view-history: used to view your previous orders") (princ #\newline)
(princ "a-view-history 'name': used to view the previous orders of the named account") (princ #\newline)
(princ "delete-order: used to delete a previous order") (princ #\newline)
(princ "a-delete-order 'name': used to delete a previous order of the named account") (princ #\newline)
(princ "delete-account: used to delete your account") (princ #\newline)
(princ "a-delete-account 'name': used to delete the named account") (princ #\newline)
(princ "log-off: used to log off of your account") (princ #\newline)
(princ "build-pc: used to place an order") (princ #\newline)
(princ "a-make-admin 'name': used to make the named account an admin") (princ #\newline)
(princ "a-delete-admin 'name': used to take away the admin rank from the named account") (princ #\newline)
(princ "a-add-component: adding a new component to the database") (princ #\newline)
(princ "a-delete-component: deleting a component from the database") (princ #\newline))
